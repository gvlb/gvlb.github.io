{"version":3,"file":"component---src-pages-blog-js-fbefb0bb8f665ba98032.js","mappings":"gNAKe,SAASA,EAAT,GAAiC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,SAChC,GAA4BC,EAAAA,EAAAA,UAAS,OAA9BC,EAAP,KAAeC,EAAf,KAEMC,EAAQL,EAAKM,kBAAkBC,MAChCJ,QAAO,SAAAK,GACJ,MAAe,QAAXL,IACJM,QAAQC,IAAI,YAAaF,EAAKG,YAAYC,KAAKC,MAC/CJ,QAAQC,IAAI,cAAeP,GACpBK,EAAKG,YAAYC,KAAK,GAAGC,OAASV,MAG3CW,EAAI,IAAIC,IACVf,EAAKgB,UAAUT,MACVJ,QAAO,SAAAc,GAAI,OAA0C,IAAtCA,EAAKC,WAAWN,KAAKO,MAAMC,UAC1CC,KAAI,SAAAJ,GAAI,OAAIA,EAAKC,WAAWN,KAAKO,MAAM,GAAGN,SAG7CS,GAAI,OAAOR,EAAES,IAAI,QAEvB,OAAoB,IAAhBD,EAAKF,OAEH,gBAAC,IAAD,CAAQnB,SAAUA,GAChB,gBAAC,IAAD,CAAKuB,MAAM,cACX,sDAQJ,gBAAC,IAAD,CAAQvB,SAAUA,GACV,uBAAKwB,UAAU,aACbH,EAAKD,KAAI,SAACK,EAAKC,GAAN,OACP,wBAAMC,QAAS,WACXxB,EAAUsB,IACXD,UAAS,uBAAyBtB,IAAWuB,EAAO,eAAiB,IAA5D,sBAAqFG,IAAKF,GAAID,OAG9G,sBAAID,UAAU,OAAOK,MAAO,CAAEC,UAAU,SACvC1B,EAAMgB,KAAI,SAAAb,GACX,IAAMgB,EAAQhB,EAAKG,YAAYa,OAAShB,EAAKwB,OAAOC,KAEpD,OACI,sBAAIJ,IAAKrB,EAAKwB,OAAOC,MACrB,2BACIR,UAAU,iBACVS,WAAS,EACTC,SAAS,6BAET,8BACA,0BACI,gBAAC,EAAAC,KAAD,CAAMC,GAAI7B,EAAKwB,OAAOC,KAAMK,SAAS,OACrC,wBAAMA,SAAS,YAAYd,KAG/B,6BAAQhB,EAAKG,YAAY4B,KAAKC,OAAS,KAEvC,+BACA,qBACIC,wBAAyB,CACzBC,OAAQlC,EAAKG,YAAYgC,aAAenC,EAAKoC,SAE7CN,SAAS","sources":["webpack://gatsby-ovalb/./src/pages/blog.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport {Link, graphql} from \"gatsby\"\n\nexport default function Blog({data, location}) {\n    const [filter, setFilter] = useState(\"all\")\n\n    const posts = data.allMarkdownRemark.nodes\n        .filter(post => {\n            if (filter === \"all\") return true\n            console.log(\"name is: \", post.frontmatter.Tags.name)\n            console.log(\"filter is: \", filter)\n            return post.frontmatter.Tags[0].name === filter\n        })\n\n    const t = new Set (\n        data.allNotion.nodes\n            .filter(node => node.properties.Tags.value.length !== 0)\n            .map(node => node.properties.Tags.value[0].name)\n    )\n\n    const tags = [...t.add('all')]\n\n    if (tags.length === 0) {\n        return (\n          <Layout location={location}>\n            <Seo title=\"All posts\" />\n            <p>\n              No blog posts found. :-(\n            </p>\n          </Layout>\n        )\n    }\n\n    return (\n        <Layout location={location}>\n                <div className=\"font-mono\">\n                { tags.map((tag, i) =>\n                    <span onClick={() => {\n                        setFilter(tag)\n                    }} className={`mr-3 font-semibold ${(filter === tag) ? \"text-red-500\" : \"\"} hover:text-red-500`} key={i}>{tag}</span>\n                )}\n                </div>\n                <ol className=\"blog\" style={{ listStyle: `none` }}>\n                {posts.map(post => {\n                const title = post.frontmatter.title || post.fields.slug\n\n                return (\n                    <li key={post.fields.slug}>\n                    <article\n                        className=\"post-list-item\"\n                        itemScope\n                        itemType=\"http://schema.org/Article\"\n                    >\n                        <header>\n                        <h2>\n                            <Link to={post.fields.slug} itemProp=\"url\">\n                            <span itemProp=\"headline\">{title}</span>\n                            </Link>\n                        </h2>\n                        <small>{post.frontmatter.Date.start || \"\" }</small>\n                        </header>\n                        <section>\n                        <p\n                            dangerouslySetInnerHTML={{\n                            __html: post.frontmatter.description || post.excerpt,\n                            }}\n                            itemProp=\"description\"\n                        />\n                        </section>\n                    </article>\n                    </li>\n                )\n                })}\n            </ol>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n        sort: { fields: [frontmatter___Date___start], order: DESC }\n        limit: 1000\n        filter: {frontmatter: {Status: {name: {eq: \"published\"}}}}\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n            Date {\n                start(formatString: \"MMMM DD, YYYY\")\n            }\n          title\n          description\n          Tags {\n              name\n          }\n        }\n      }\n    }\n    allNotion {\n        nodes {\n            properties {\n                Tags {\n                    value {\n                        name\n                    }\n                }\n            }\n        }\n    }\n  }\n`"],"names":["Blog","data","location","useState","filter","setFilter","posts","allMarkdownRemark","nodes","post","console","log","frontmatter","Tags","name","t","Set","allNotion","node","properties","value","length","map","tags","add","title","className","tag","i","onClick","key","style","listStyle","fields","slug","itemScope","itemType","Link","to","itemProp","Date","start","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}